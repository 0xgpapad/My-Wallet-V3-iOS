opt_out_usage

default_platform(:ios)
platform :ios do

  before_all do
    # This is required to setup the temporary keychain
    setup_circle_ci
  end

  desc "Builds using the dev environment"
  lane :dev do
    key_id = ENV["APPSTORE_CONNECT_API_KEY_ID"]
    issuer_id = ENV["APPSTORE_CONNECT_API_ISSUER_ID"]
    key_content = ENV["APPSTORE_CONNECT_API_KEY_CONTENT"]
    api_key = app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_content: key_content
    )
    sync_code_signing(type: "appstore", readonly: true, key_id: key_id)
    build_app(
      clean: true,
      export_method: "app-store",
      include_bitcode: true,
      include_symbols: true,
      scheme: "Blockchain (Dev)",
      workspace: "Blockchain.xcworkspace"
    )
    if is_ci?
      # Send Slack notification to #ios-ci channel
      # slack(message: "App successfully build!")
    end
  end

  desc "Builds using the staging environment"
  lane :staging do
    build_app(
      clean: true,
      include_bitcode: true,
      include_symbols: true,
      scheme: "Blockchain (Staging)",
      workspace: "Blockchain.xcworkspace"
    )
  end

  desc "Runs all unit tests on Blockchain (Staging) scheme"
  lane :execute_tests do
    scan
  end

  desc "Updates code signing on the current machine"
  lane :code_signing do
    # Global parameters are loaded from the Matchfile
    match(type: "appstore", readonly: true)
    match(type: "adhoc", force_for_new_devices: true)
  end

  desc "Upload to TestFlight"
  lane :upload do
    key_id = ENV["APPSTORE_CONNECT_API_KEY_ID"]
    issuer_id = ENV["APPSTORE_CONNECT_API_ISSUER_ID"]
    key_content = ENV["APPSTORE_CONNECT_API_KEY_CONTENT"]
    api_key = app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_content: key_content
    )
    match(type: "appstore", readonly: true, api_key: api_key)
    upload_to_testflight(
      api_key: api_key,
      ipa: "output/Blockchain.ipa",
      skip_submission: true,
      skip_waiting_for_build_processing: true
    )
  end
 
  desc "Upload dsyms zip file to Crashlytics. Optional isStaging parameter (defaults to false)."
  lane :upload_dsyms do |options|
    environment = (options[:isStaging] ? "Staging" : "Prod")
    # Assumes there is a 'blockchain-dsyms.zip' file in `./output` directory.
    # To create the zip file, execute the following commands:
    # cd $BITRISE_SOURCE_DIR/output/Blockchain.xcarchive/dSYMs/
    # zip -r $BITRISE_SOURCE_DIR/output/blockchain-dsyms.zip . 
    upload_symbols_to_crashlytics(
      binary_path: "./scripts/crashlytics/upload-symbols",
      dsym_path: "./output/blockchain-dsyms.zip",
      gsp_path: "./Blockchain/Firebase/#{environment}/GoogleService-Info.plist"
    )
  end

  desc "Upload IPA to AppCenter."
  lane :upload_to_appcenter do
  	#  Expected env vars: 
  	#  APPCENTER_API_TOKEN, APPCENTER_DISTRIBUTE_FILE, APPCENTER_OWNER_NAME,
  	#  APPCENTER_DISTRIBUTE_DESTINATIONS, APPCENTER_DISTRIBUTE_RELEASE_NOTES and APPCENTER_APP_NAME
  	appcenter_upload
  end
end
